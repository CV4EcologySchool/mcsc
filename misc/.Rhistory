#largeMam[order(largeMam$priority, -largeMam$resistance),]
#dim(largeMam)
#str(largeMam)
#head(largeMam)
#nrow(sqldf("SELECT distinct feature,type, priority, resistance, view from largeMam;")) # check for dups
#===============================================
# Create rasters for each feature
#===============================================
#city <- c('Chicago')
#city <- c('City_of_New_York')
#city <- c('City_of_New_York', 'Chicago')
#city <- c('Fort_Collins')
#city <- c('City_of_New_York', 'Fort_Collins', 'Chicago')
city <- c('Peterborough')
#city <- c('Peterborough', 'Brantford')
featUrb <- unique(largeMam$view)
#featUrb <- featUrb[c(9:14)]
for (k in 1:length(city)) {
for (i in 1:length(featUrb)) {
vals <- sqldf(paste0("SELECT distinct priority, resistance FROM largeMam WHERE view='", featUrb[i],"' ORDER BY priority, resistance;"))
for (j in 1:nrow(vals)) {
sqlPrimer <- sqldf(paste0("SELECT distinct feature, type, priority, resistance, view FROM largeMam WHERE view='", featUrb[i],"' AND priority=",vals$priority[j], " AND resistance=", vals$resistance[j], " ORDER BY resistance;"))
queryEnv <- paste0("SELECT * FROM ",city[k],"_env", ";")
# the [1] could be removed if there are no dups
queryUrFts <-paste0("SELECT ", sqlPrimer$resistance[1]," as resistance, geom
FROM
(
SELECT (ST_DUMP(ST_Intersection(t1.geom, t2.geom))).geom::geometry('Polygon', 3857) AS geom
FROM (",
#paste0("SELECT * FROM ", sqlPrimer$view[1], " WHERE type ", ifelse(paste0(paste(sqlPrimer$type, collapse = "', '"))=='none', 'IS NULL', paste0("IN (","'",paste(sqlPrimer$type, collapse = "', '"), "'", ")" ) )) ,
paste0("SELECT * FROM ", sqlPrimer$view[1], " ",ifelse(grepl('NULL', paste(sqlPrimer$type, collapse = "', '")), paste0(" WHERE type IS NULL OR type ", paste0("IN (","'",paste(sqlPrimer$type, collapse = "', '"), "'", ")" )), paste0("WHERE TYPE IN (","'",paste(sqlPrimer$type, collapse = "', '"), "'", ")" ) )) ,
") t1
JOIN
", city[k],"_env", " t2
ON st_intersects(t1.geom,t2.geom)) t3;")
vectorEnv <- vect(st_read(con_pg, query=queryEnv))
raster1 <- rast(vectorEnv, resolution=30, crs=crs(vectorEnv))
#queryUrFts <- paste0("SELECT * FROM ", city[i],"_ur_fts", ";" )
vectorUrFts <- try(vect(st_read(con_pg, query=queryUrFts)) ) # when vector has no rows then Warning: 1: [SpatVector from sf] empty SpatVector
if(class(vectorUrFts) == "try-error") { vectorUrFts <- c() }
if( length(vectorUrFts)==0)
{ print("empty vector")} else
{
rasterRes1 <- rasterize(vectorUrFts, raster1, field="resistance", background=NA, touches=FALSE,
update=FALSE, sum=FALSE, cover=FALSE, overwrite=FALSE)
dir.create(paste0(outF,"rasters"))
dir.create(paste0(outF,"rasters/",city[k]))
writeRaster(rasterRes1, paste0(outF,"rasters/",city[k],"/",sqlPrimer$view[1],"__",sqlPrimer$priority[1],"__",sqlPrimer$resistance[1],".tif"), overwrite=TRUE)
}
}
}
}
# disconnect from db
#dbDisconnect(con_pg)
#end.time <- Sys.time()
#time.taken <- end.time - start.time
#time.taken
#=========================
# Stack & collapse rasters
#=========================
# Read raster based on priority flag first, then stack, and collapse
rasterFiles <- list.files(paste0(outF,"rasters/",city[k]), pattern='.tif$', full.names = TRUE)
resVals <- sapply(strsplit(rasterFiles, "__"), "[", 3)
resVals <- gsub(".tif", "", resVals)
#resVals <- as.integer(resVals)
priVals <- sapply(strsplit(rasterFiles, "__"), "[", 2)
priOrd <- as.data.frame(cbind(rasterFiles, priVals, resVals))
priOrd$priority <- as.numeric(priOrd$priVals)
priOrd$resistance <- as.numeric(priOrd$resVals)
priOrd <- priOrd[order(-priOrd$priority),] #reverse order
priOrd$order <- 1:nrow(priOrd)
r1 <- rast(priOrd$rasterFiles)
r3 <- app(r1, fun='first', na.rm=TRUE)
#r3 <- subst(r2, NA, 50)
#r3 <- r2
dir.create(paste0(outF,"rasters/",city[k],"/output"))
writeRaster(r3, paste0(outF,"rasters/",city[k],"/output/",'urban_features.tif'), overwrite=TRUE)
#==========
# New part
#==========
#r4 <- rast("~/projects/def-mfortin/georod/data/cec/NA_NALCMS_2015_LC_30m_LAEA_mmu5pix_.tif")
r4 <- rast("C:\\Users\\Peter R\\Documents\\data\\ont_Red.tif")
cecRes <- read.csv("./misc/cec_north_america_resistance_values.csv")
# Crop North America land cover map first
#ext1 <- ext(r3)
#ext1 <- as.polygons(ext(r3))
#crs(ext1) <- "EPSG:3857"
# Get extent of city envelope
ext1 <- buffer(vectorEnv, width=500)
# Get crs of N. America raster
newcrs <- crs(r4, proj=TRUE)
# Project to North America raster projection
ext1Pj <- terra::project(ext1, newcrs)
# Crop NA land cover to city envelope extent
r5 <- crop(r4, ext1Pj)
# transform cropped raster crs to EPSG 3857 , "EPSG:3857"
r6 <- project(r5, r3, method="near", align=TRUE)
# crop to ensure rasters have the same extent
r6 <- crop(r6, r3)
#plot(r6, type="classes")
# Mask raster
r7 <- mask(r6, r3, inverse=TRUE, maskvalue=NA)
rclM <- as.matrix(cecRes[,c(3,5)])
#rclM <- matrix(rclM, ncol=2, byrow=TRUE)
r8 <- classify(r7, rclM)
#plot(r8, type="classes")
r9 <- cover(r3, r8)
r9 <- subst(r9, 0, 100)
#plot(r9, type="classes")
writeRaster(r9, paste0(outF,"rasters/",city[k],"/output/",'all_features.tif'), overwrite=TRUE)
# disconnect from db
dbDisconnect(con_pg)
plot(r9, type="classes")
cecRes
# large_mammals
largeMam <- resVals[!is.na(resVals$res_large_mammals),c(1:5)]
# small_mammals
smallMam <- resVals[!is.na(resVals$res_small_mammals),c(1:4, 6)]
# large_mammals
largeMam <- resVals[!is.na(resVals$res_large_mammals),c(1:5)]
df1 <- readRDS("./misc/df_unique_res.rds")
# clean df so that feature names match SQL VIEWS
df1$view <- ifelse(df1$view=='lf_roads', 'lf_roads_bf', df1$view)
df1$view <- ifelse(df1$view=='lf_rails', 'lf_rails_bf', df1$view)
df1$view <- ifelse(df1$view=='barrier', 'barrier_bf', df1$view)
# select relevant columns
df1 <- df1[,c(1,2,4,5, 7, 8)]
# remove duplicates
df1 <- df1[!duplicated(df1), ]
resVals <- df1
# large_mammals
largeMam <- resVals[!is.na(resVals$res_large_mammals),c(1:5)]
summary(largeMam)
# small_mammals
smallMam <- resVals[!is.na(resVals$res_small_mammals),c(1:4, 6)]
summary(smallMam)
summary(as.numeric(largeMam$res_large_mammals))
summary(as.numeric(largeMam$res_small_mammals))
summary(as.numeric(smallMam$res_small_mammals))
hist(as.numeric(largeMam$res_small_mammals))
hist(as.numeric(largeMam$res_large_mammals))
hist(as.numeric(smallMam$res_small_mammals))
plot(r3, type="classes")
plot(r6, tyepe="classes")
rcl2 <-as.matrix(0,16, NA, 18, 19, NA)
rcl2
rcl2 <-matrix(0, 16, NA, 18, 19, NA), nrow=3, ncol=3, byrow=TRUE)
rcl2 <-matrix(c(0, 16, NA, 18, 19, NA), nrow=3, ncol=3, byrow=TRUE)
rcl2
rcl2 <-matrix(c(0, 16, NA, 18, 19, NA), nrow=2, ncol=3, byrow=TRUE)
rcl2
ur <- reclassify(r6, rcl2)
ur <- classify(r6, rcl2)
plot(ur, type="classes")
ur <- classify(r6, rcl2, right=NA)
plot(ur, type="classes")
density(ur, maxcells=100000, plot=TRUE)
contour(ur, filled=TRUE)
urPts <- as.points(ur, values=TRUE, na.rm=TRUE, na.all=FALSE)
plot(utPts)
plot(urPts)
conH <- convHull(urPts)
plot(conH)
ur <- subst(ur, 17, 1)
plot(ur, type="classes")
ur2 <- terra::aggregate(ur, factor=10, fun='sum', dissolve=TRUE)
plot(ur2, type="classes")
rcl2 <-matrix(c(0, 16, NA,18, 19, NA), nrow=2, ncol=3, byrow=TRUE)
rcl2
ur <- classify(r6, rcl2, right=NA)
plot(ur, type="classes")
ur <- subst(ur, 17, 1)
plot(ur, type="classes")
ur2 <- terra::aggregate(ur, factor=10, fun='sum')
plot(ur2, type="classes")
ur2 <- terra::aggregate(ur, factor=100, fun='sum')
plot(ur2, type="classes")
ur2
ur2 <- terra::aggregate(ur, factor=100, fun='sum', na.rm=TRUE)
plot(ur2, type="classes")
ur2
ur
ur2 <- terra::aggregate(ur, factor=500, fun='sum', na.rm=TRUE)
ur2
ur2 <- terra::aggregate(ur, factor=10, fun='sum', na.rm=TRUE)
ur2
rcl3 <-matrix(c(1, 3, NA), nrow=1, ncol=3, byrow=TRUE)
rcl3
ur3 <- classify(ur2, rcl3, right=NA)
plot(ur3, type="classes")
plot(ur3, type="classes", "green")
plot(ur3, type="classes", col="green")
ur4 <- terra::aggregate(ur3, factor=10, fun='sum', na.rm=TRUE)
plot(ur3, type="classes", col="red")
ur4
ur5 <- terra::aggregate(ur4, factor=10, fun='sum', na.rm=TRUE)
plot(ur5, type="classes", col="red")
ur5
plot(ur4, type="classes", col="red")
rcl4 <-matrix(c(4, 12, NA), nrow=1, ncol=3, byrow=TRUE)
rcl4 <-matrix(c(4, 12, NA), nrow=1, ncol=3, byrow=TRUE)
ur5 <- classify(ur4, rcl4, right=NA)
plot(ur5, type="classes", col="red")
ur5
install.packages("adehabitatHR")
librarys("adehabitatHR")
library("adehabitatHR")
clas(urPts)
class(urPts)
urPtsSf <- sf::st_as_sf(urPts)
class( urPtsSf)
urPtsSp <- as(urPtsSf, 'Spatial')
class(urPtsSp )
head(urPtsSp)
urPtsSf
crs(urPtsSf)
urPtsSp <- as(urPtsSf, 'Spatial', crs(urPtsSf))
urPtsSp <- as(urPtsSf, 'Spatial', crs=crs(urPtsSf))
class(urPtsSp)
crs(urPtsSp)
urPtsSp
head(urPtsSp)
urPtsSf <- sf::st_as_sf(urPts)
urPtsSp <- sf::as(urPtsSf, 'Spatial') #, proj4string=crs(urPtsSp))
urPtsSp <- as(urPtsSf, 'Spatial') #, proj4string=crs(urPtsSp))
class(urPtsSp)
crs(urPtsSp)
crs(urPtsSp)
head(urPtsSp)
urConH <- mcp(urPtsSp, percent=50, unin = c("m"),unout = c("m2"))
class(urConH )
plot(urConH)
head(urConH)
v1 <- terra::vect(urConH)
plot(ur, type="classes")
plot(ur, type="classes", col="blue")
plot(v1, add=TRUE)
urConH <- mcp(urPtsSp, percent=80, unin = c("m"),unout = c("m2"))
plot(urConH)
v1 <- terra::vect(urConH)
plot(ur, type="classes", col="green")
plot(v1, add=TRUE, col="red")
plot(ur, type="classes", col="green")
plot(v1, add=TRUE, lwd=2, col="red")
plot(ur, type="classes", col="green")
plot(v1, add=TRUE, lwd=2)
r3 <- rast("C:\\Users\\Peter R\\Documents\\rasters\\Peterborough\\residential__4__35.tif")
plot(r3)
#urPts <- as.points(ur, values=TRUE, na.rm=TRUE, na.all=FALSE)
urPts <- as.points(r3, values=TRUE, na.rm=TRUE, na.all=FALSE)
urPtsSf <- sf::st_as_sf(urPts)
urPtsSp <- as(urPtsSf, 'Spatial') #, proj4string=crs(urPtsSp))
urConH <- mcp(urPtsSp, percent=80, unin = c("m"),unout = c("m2"))
plot(urConH)
v1 <- terra::vect(urConH)
plot(ur, type="classes", col="green")
plot(r3, type="classes", col="green")
plot(v1, add=TRUE, lwd=2)
setwd("~/github/mcsc/")
city <- read.csv("~/github/mcsc/misc/mcsc_city_list1.csv")
city <- read.csv("c:/Users/Peter R/github/mcsc/misc/mcsc_city_list1.csv")
head(city)
dim(city)
dim( city[!is.na(city$osm_id),])
# List of city names found in OSM (OpenStreetMap)
#city <- c('Peterborough', 'Brantford') # 'Brantford'
city <- city[!is.na(city$osm_id),]
city$pg_city <- gsub(" ", "_", city$osm_city)
head(city)
j
paste0("CREATE TABLE ", city$pg_city[j],"_env", "  AS SELECT (row_number() OVER ())::int AS sid, relation_id::varchar(20), 'background'::varchar(30) AS feature, tags->>'name'::varchar(30)  AS type, tags ->> 'admin_level'::varchar(30) AS material, '' AS size, st_envelope(st_buffer(st_envelope(st_multi(st_buildarea(geom))), 500))::geometry(Polygon, 3857) AS geom  FROM boundaries WHERE relation_id=", city$osm_id[j], " ;")
city[city$pg_city=='Toronto',]
#===================
# Libraries
#===================
library(DBI)
# Using dplyr
#install.packages("dplyr")
library(dplyr)
#install.packages('vctrs')
#library(vctrs)
#sessionInfo()
#detach("dplyr", unload=TRUE)
#=================================
# Connect to PG db
#=================================
# add username and pwd to .Renviron
con_pg <- DBI::dbConnect(
drv = RPostgres::Postgres(),
host = "localhost",
port = 5432,
dbname = "osm",
user = Sys.getenv("username"),
password = Sys.getenv("pwd")
)
df <- dbGetQuery(con_pg, "SELECT distinct * FROM urban_features_v1")
dim(df)
##create able with unique values
df_unique <- df %>% dplyr::count(feature, type, material, priority, view, .drop=FALSE)
#check
#df_unique %>% filter(feature =="commercial_industrial")
#create summary tables - intermediate products
df_unique_features <- df_unique %>% count(feature, priority)
df_unique_features_types <- df_unique %>% count(feature,type, priority)
##set resistance values
head(df_unique)
df_unique_res <- df_unique %>%
mutate(resistance = ifelse(feature == "background", 50, 'NULL')) %>%
mutate(resistance = ifelse(feature == "water", 100, resistance)) %>%
mutate(resistance = ifelse(feature == "barrier", 70, resistance))%>%
mutate(resistance = ifelse(feature == "parking_surface", 20, resistance))%>%
mutate(resistance = ifelse(feature == "residential", 35, resistance))%>%
mutate(resistance = ifelse(feature == "institutional", 30, resistance))%>%
mutate(resistance = ifelse(feature == "open_green_area", 20, resistance))%>%
mutate(resistance = ifelse(feature == "hetero_green_area", 10, resistance))%>%
mutate(resistance = ifelse(feature == "dense_green_area", 5, resistance))%>%
mutate(resistance = ifelse(feature == "resourceful_green_area", 10, resistance))%>%
mutate(resistance = ifelse(feature == "building", 100, resistance))%>%
mutate(resistance = ifelse(feature == "linear_feature_rail", 15, resistance))%>%
mutate(resistance = ifelse(feature == "linear_feature_rail"& type %in% c('abandoned','disused','miniature','proposed','razed','signal_box'), 10, resistance))%>%
mutate(resistance = ifelse(feature == "linear_feature_rail"& type %in% c('light_rail','narrow_gauge','proposed','rail','turntable'), 20, resistance))%>%
mutate(resistance = ifelse(feature == "linear_feature_rail"& type %in% c('platform'), 30, resistance))%>%
mutate(resistance = ifelse(feature == "linear_feature_rail"& type %in% c('tram'), 45, resistance))%>%
mutate(resistance = ifelse(feature == "linear_feature_rail"& type %in% c('construction'), 50, resistance))%>%
mutate(resistance = ifelse(feature == "linear_feature_rail"& type %in% c('preserved','station','traverser'), 100, resistance))%>%
mutate(resistance = ifelse(feature == "linear_feature", 20, resistance))%>%
mutate(resistance = ifelse(feature == "linear_feature"& type %in% c('abandoned','footway','proposed','razed'), 10, resistance))%>%
mutate(resistance = ifelse(feature == "linear_feature"& type %in% c('bridleway','construction','crossing','path','pedestrian','proposed','rest_area','services','track'), 20, resistance))%>%
mutate(resistance = ifelse(feature == "linear_feature"& type %in% c('cycleway','living_street','platform','residential','steps'), 30, resistance))%>%
mutate(resistance = ifelse(feature == "linear_feature"& type %in% c('primary','road','secondary','secondary_link','tertiary','tertiary_link','unclassified'), 45, resistance))%>%
mutate(resistance = ifelse(feature == "linear_feature"& type %in% c('construction','escape','motorway','motorway_link','trunk','trunk_link','turning_loop'), 50, resistance))%>%
mutate(resistance = ifelse(feature == "linear_feature"& type %in% c('corridor','elevator','platform','raceway'), 100, resistance))%>%
mutate(resistance = ifelse(feature == "commercial_industrial" & type =="commercial", 50, resistance)) %>%
mutate(resistance = ifelse(feature == "commercial_industrial" & type =="retail", 50, resistance)) %>%
mutate(resistance = ifelse(feature == "commercial_industrial" & type =="industrial", 70, resistance))
#df_unique %>% filter(feature=="commercial_industrial")
##update resistance values for small_mammals and add them in a new column
df_unique_res  <- df_unique_res %>%
mutate(resistance_sm = ifelse(feature == "linear_feature", 40, resistance))
#rename columns
df_unique_res  <- df_unique_res %>% rename(res_large_mammals = resistance, res_small_mammals = resistance_sm)
#eliminate values for background feature, since now using envelope as background
df_unique_res  <- df_unique_res %>% filter(feature != 'background')
##check
check <- df_unique_res %>% count(feature, priority, res_large_mammals, res_small_mammals)
##footway in commercial_industrial
#View(check)
##set priorities to avoid conflicting resistance values within the same priority level
df_unique_res <- df_unique_res %>%
#mutate(priority = ifelse(feature == "background", 'NULL', 'NULL')) %>%
mutate(priority = ifelse(feature == "water", 26, priority)) %>%
mutate(priority = ifelse(feature == "barrier", 25, priority))%>%
mutate(priority = ifelse(feature == "parking_surface", 9, priority))%>%
mutate(priority = ifelse(feature == "residential", 4, priority))%>%
mutate(priority = ifelse(feature == "institutional", 3, priority))%>%
mutate(priority = ifelse(feature == "open_green_area", 6, priority))%>%
mutate(priority = ifelse(feature == "hetero_green_area", 7, priority))%>%
mutate(priority = ifelse(feature == "dense_green_area", 8, priority))%>%
mutate(priority = ifelse(feature == "resourceful_green_area", 5, priority))%>%
mutate(priority = ifelse(feature == "building", 10, priority))%>%
mutate(priority = ifelse(feature == "linear_feature_rail", 18, priority))%>%
mutate(priority = ifelse(feature == "linear_feature_rail"& type %in% c('abandoned','disused','miniature','proposed','razed','signal_box'), 19, priority))%>%
mutate(priority = ifelse(feature == "linear_feature_rail"& type %in% c('light_rail','narrow_gauge','proposed','rail','turntable'), 20, priority))%>%
mutate(priority = ifelse(feature == "linear_feature_rail"& type %in% c('platform'), 21, priority))%>%
mutate(priority = ifelse(feature == "linear_feature_rail"& type %in% c('tram'), 22, priority))%>%
mutate(priority = ifelse(feature == "linear_feature_rail"& type %in% c('construction'), 23, priority))%>%
mutate(priority = ifelse(feature == "linear_feature_rail"& type %in% c('preserved','station','traverser'), 24, priority))%>%
mutate(priority = ifelse(feature == "linear_feature", 11, priority))%>%
mutate(priority = ifelse(feature == "linear_feature"& type %in% c('abandoned','footway','proposed','razed'), 12, priority))%>%
mutate(priority = ifelse(feature == "linear_feature"& type %in% c('bridleway','construction','crossing','path','pedestrian','proposed','rest_area','services','track'), 13, priority))%>%
mutate(priority = ifelse(feature == "linear_feature"& type %in% c('cycleway','living_street','platform','residential','steps'), 14, priority))%>%
mutate(priority = ifelse(feature == "linear_feature"& type %in% c('primary','road','secondary','secondary_link','tertiary','tertiary_link','unclassified'), 15, priority))%>%
mutate(priority = ifelse(feature == "linear_feature"& type %in% c('construction','escape','motorway','motorway_link','trunk','trunk_link','turning_loop'), 16, priority))%>%
mutate(priority = ifelse(feature == "linear_feature"& type %in% c('corridor','elevator','platform','raceway'), 17, priority))%>%
mutate(priority = ifelse(feature == "commercial_industrial" & type =="commercial", 2, priority)) %>%
mutate(priority = ifelse(feature == "commercial_industrial" & type =="retail", 2, priority)) %>%
mutate(priority = ifelse(feature == "commercial_industrial" & type =="industrial", 1, priority))
df_unique_res <- df_unique_res %>%
#mutate(class = ifelse(feature == "background", 'NULL', 'NULL')) %>%
mutate(class = ifelse(feature == "water", 26, class)) %>%
mutate(class = ifelse(feature == "barrier", 25, class))%>%
mutate(class = ifelse(feature == "parking_surface", 9, class))%>%
mutate(class = ifelse(feature == "residential", 4, class))%>%
mutate(class = ifelse(feature == "institutional", 3, class))%>%
mutate(class = ifelse(feature == "open_green_area", 6, class))%>%
mutate(class = ifelse(feature == "hetero_green_area", 7, class))%>%
mutate(class = ifelse(feature == "dense_green_area", 8, class))%>%
mutate(class = ifelse(feature == "resourceful_green_area", 5, class))%>%
mutate(class = ifelse(feature == "building", 10, class))%>%
mutate(class = ifelse(feature == "linear_feature_rail", 18, class))%>%
mutate(class = ifelse(feature == "linear_feature_rail"& type %in% c('abandoned','disused','miniature','proposed','razed','signal_box'), 19, class))%>%
mutate(class = ifelse(feature == "linear_feature_rail"& type %in% c('light_rail','narrow_gauge','proposed','rail','turntable'), 20, class))%>%
mutate(class = ifelse(feature == "linear_feature_rail"& type %in% c('platform'), 21, class))%>%
mutate(class = ifelse(feature == "linear_feature_rail"& type %in% c('tram'), 22, class))%>%
mutate(class = ifelse(feature == "linear_feature_rail"& type %in% c('construction'), 23, class))%>%
mutate(class = ifelse(feature == "linear_feature_rail"& type %in% c('preserved','station','traverser'), 24, class))%>%
mutate(class = ifelse(feature == "linear_feature", 11, class))%>%
mutate(class = ifelse(feature == "linear_feature"& type %in% c('abandoned','footway','proposed','razed'), 12, class))%>%
mutate(class = ifelse(feature == "linear_feature"& type %in% c('bridleway','construction','crossing','path','pedestrian','proposed','rest_area','services','track'), 13, class))%>%
mutate(class = ifelse(feature == "linear_feature"& type %in% c('cycleway','living_street','platform','residential','steps'), 14, class))%>%
mutate(class = ifelse(feature == "linear_feature"& type %in% c('primary','road','secondary','secondary_link','tertiary','tertiary_link','unclassified'), 15, class))%>%
mutate(class = ifelse(feature == "linear_feature"& type %in% c('construction','escape','motorway','motorway_link','trunk','trunk_link','turning_loop'), 16, class))%>%
mutate(class = ifelse(feature == "linear_feature"& type %in% c('corridor','elevator','platform','raceway'), 17, class))%>%
mutate(class = ifelse(feature == "commercial_industrial" & type =="commercial", 2, class)) %>%
mutate(class = ifelse(feature == "commercial_industrial" & type =="retail", 2, class)) %>%
mutate(class = ifelse(feature == "commercial_industrial" & type =="industrial", 1, class))
`rlang::last_error()
`
rlang::last_error()
rlang::last_trace()
head(f_unique_res)
head(df_unique_res)
test1 <- df_unique_res %>%  mutate(class = ifelse(feature == "water", 26, class))
dim(df_unique_res)
test1 <- df_unique_res %>%  mutate("class" = ifelse(feature == "water", 26, class))
test1 <- df_unique_res %>%  mutate("class" = ifelse(feature == "water", 26, "class"))
head(test)
head(test1)
test1 <- df_unique_res %>%  mutate("class" = ifelse(feature == "water", 26, class))
test1 <- df_unique_res %>%  mutate("class" = ifelse(feature == "water", 26, 1))
head(test1)
df_unique_res$class <- df_unique_res$priority
head(df_unique_res)
df_unique_res <- df_unique_res %>%
#mutate(class = ifelse(feature == "background", 'NULL', 'NULL')) %>%
mutate(class = ifelse(feature == "water", 26, class)) %>%
mutate(class = ifelse(feature == "barrier", 25, class))%>%
mutate(class = ifelse(feature == "parking_surface", 9, class))%>%
mutate(class = ifelse(feature == "residential", 4, class))%>%
mutate(class = ifelse(feature == "institutional", 3, class))%>%
mutate(class = ifelse(feature == "open_green_area", 6, class))%>%
mutate(class = ifelse(feature == "hetero_green_area", 7, class))%>%
mutate(class = ifelse(feature == "dense_green_area", 8, class))%>%
mutate(class = ifelse(feature == "resourceful_green_area", 5, class))%>%
mutate(class = ifelse(feature == "building", 10, class))%>%
mutate(class = ifelse(feature == "linear_feature_rail", 18, class))%>%
mutate(class = ifelse(feature == "linear_feature_rail"& type %in% c('abandoned','disused','miniature','proposed','razed','signal_box'), 19, class))%>%
mutate(class = ifelse(feature == "linear_feature_rail"& type %in% c('light_rail','narrow_gauge','proposed','rail','turntable'), 20, class))%>%
mutate(class = ifelse(feature == "linear_feature_rail"& type %in% c('platform'), 21, class))%>%
mutate(class = ifelse(feature == "linear_feature_rail"& type %in% c('tram'), 22, class))%>%
mutate(class = ifelse(feature == "linear_feature_rail"& type %in% c('construction'), 23, class))%>%
mutate(class = ifelse(feature == "linear_feature_rail"& type %in% c('preserved','station','traverser'), 24, class))%>%
mutate(class = ifelse(feature == "linear_feature", 11, class))%>%
mutate(class = ifelse(feature == "linear_feature"& type %in% c('abandoned','footway','proposed','razed'), 12, class))%>%
mutate(class = ifelse(feature == "linear_feature"& type %in% c('bridleway','construction','crossing','path','pedestrian','proposed','rest_area','services','track'), 13, class))%>%
mutate(class = ifelse(feature == "linear_feature"& type %in% c('cycleway','living_street','platform','residential','steps'), 14, class))%>%
mutate(class = ifelse(feature == "linear_feature"& type %in% c('primary','road','secondary','secondary_link','tertiary','tertiary_link','unclassified'), 15, class))%>%
mutate(class = ifelse(feature == "linear_feature"& type %in% c('construction','escape','motorway','motorway_link','trunk','trunk_link','turning_loop'), 16, class))%>%
mutate(class = ifelse(feature == "linear_feature"& type %in% c('corridor','elevator','platform','raceway'), 17, class))%>%
mutate(class = ifelse(feature == "commercial_industrial" & type =="commercial", 2, class)) %>%
mutate(class = ifelse(feature == "commercial_industrial" & type =="retail", 2, class)) %>%
mutate(class = ifelse(feature == "commercial_industrial" & type =="industrial", 1, class))
pwd()
getwd()
setwd("C:\Users\Peter R\github\mcsc\misc")
setwd("C:/Users/Peter R/github/mcsc/misc")
getwd()
head(df_unique_res)
tail(df_unique_res)
# Save object
saveRDS(df_unique_res, "df_unique_res.rds")
# disconnect from db
dbDisconnect(con_pg)
# Restore object (see urban_features_master_list_v1.R)
df1 <- readRDS("./misc/df_unique_res.rds")
getwd()
df1 <- readRDS("./df_unique_res.rds")
# clean df so that feature names match SQL VIEWS
df1$view <- ifelse(df1$view=='lf_roads', 'lf_roads_bf', df1$view)
df1$view <- ifelse(df1$view=='lf_rails', 'lf_rails_bf', df1$view)
df1$view <- ifelse(df1$view=='barrier', 'barrier_bf', df1$view)
head(df1)
# select relevant columns
df1 <- df1[,c(1,2,4,5, 7, 8, 9)]
# remove duplicates
df1 <- df1[!duplicated(df1), ]
resVals <- df1
head(resVals)
# large_mammals
largeMam <- resVals[!is.na(resVals$res_large_mammals),c(1:5, 7)]
head(largeMam)
names(largeMam) <- c("feature","type","priority", "view", "resistance", "class")
head(largeMam)
names(smallMam) <- c("feature","type","priority", "view", "resistance", "class")
# small_mammals
smallMam <- resVals[!is.na(resVals$res_small_mammals),c(1:4, 6,7)]
names(smallMam) <- c("feature","type","priority", "view", "resistance", "class")
head(smallMam)
cecRes <- read.csv("./misc/cec_north_america_resistance_values.csv")
cecRes <- read.csv("./cec_north_america_resistance_values.csv")
head(cecRes)
dim(cecRes)
rclM <- as.matrix(cecRes[,c(3,6)])
rclM
head(df1)
dim(df1)
df1 <- readRDS("./df_unique_res.rds")
dim(df1)
head(df1)
# clean df so that feature names match SQL VIEWS
df1$view <- ifelse(df1$view=='lf_roads', 'lf_roads_bf', df1$view)
df1$view <- ifelse(df1$view=='lf_rails', 'lf_rails_bf', df1$view)
df1$view <- ifelse(df1$view=='barrier', 'barrier_bf', df1$view)
unique(df1$view)
# select relevant columns
df1 <- df1[,c(1,2,4,5, 7, 8, 9)]
head(df1)
df1 <- readRDS("./df_unique_res.rds")
dim(df1)
head(df1)
unique(df1$view)
getwd()
